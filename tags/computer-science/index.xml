<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>computer science on 우명규</title>
        <link>https://myeongcode.github.io/tags/computer-science/</link>
        <description>Recent content in computer science on 우명규</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <lastBuildDate>Wed, 15 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://myeongcode.github.io/tags/computer-science/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>알고리즘의 개념 &amp; 시간복잡도</title>
        <link>https://myeongcode.github.io/p/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B0%9C%EB%85%90-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/</link>
        <pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate>
        
        <guid>https://myeongcode.github.io/p/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B0%9C%EB%85%90-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/</guid>
        <description>&lt;img src="https://myeongcode.github.io/p/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98%EC%9D%98-%EA%B0%9C%EB%85%90-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84/algo.png" alt="Featured image of post 알고리즘의 개념 &amp; 시간복잡도" /&gt;&lt;h2 id=&#34;개요&#34;&gt;개요&lt;/h2&gt;
&lt;p&gt;우리는 코딩을 하면서 알고리즘이라는 것을 흔하게 마주하고 개발자라면 피할 수 없는 개념이 바로 &lt;code&gt;알고리즘&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;그렇다면, 알고리즘이 뭔지 왜 우리가 알고리즘을 알고 사용해야하는지를 알아야 합니다. 학교에서 알고리즘에 대한 내용들을 배우면서 tree, stack, queue등 다양한 자료구조가 있는지를 공부했다. 하지만, 이 알고리즘이라는 것을 사용하는 이유에 대해 설명하라고 한다면, 순간 뇌정지가 오며 어버버 할 가능성 100%&lt;/p&gt;
&lt;p&gt;그래서.. 알고리즘에 대해서 나만의 방식으로 정리하고 누군가가 물어봤을 때에도 이해를 잘 시켜줄 수 있을만큼 정리를 하려한다.&lt;/p&gt;
&lt;h2 id=&#34;알고리즘&#34;&gt;알고리즘?&lt;/h2&gt;
&lt;p&gt;우리는 알고리즘이 탄생하게 된 이유를 알아야 한다.&lt;/p&gt;
&lt;p&gt;살다보면 어떠한 문제를 앞에 놓고 막연하게 어떻게 해결해야 하는지에 대해 고민을 해야할 때가 있다. 그럴 때 우리는 문제들을 해결하기 위한 여러 동작을 하게되는데 이것들을 수학적으로 계산하여 추론하기 위한 ‘일련의 단계적 절차’이자 ‘동작들의 모임’이라고 한다.&lt;/p&gt;
&lt;p&gt;즉, &lt;code&gt;알고리즘&lt;/code&gt;이란 &lt;strong&gt;문제점을 해결하기 위한 방법과 절차&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;예를 들어, 학생 100명의 시험 점수의 평균을 내야한다고 했을 때 당신이라면 어떻게 해결하겠습니까?&lt;/p&gt;
&lt;p&gt;물론 100명의 시험 점수를 모두 더해서 100으로 나누면 되겠지만.. 1000명, 1만명의 시험 점수를 평균 내야한다고 했을 때에도 똑같은 방법으로 할 수 있을까? 아마 시간과 효율이 많이 떨어지게 될 것이다.&lt;/p&gt;
&lt;p&gt;그래서 우리는 이런 문제를 해결할 때는 시간과 효율성을 중요하게 생각해야 한다.&lt;/p&gt;
&lt;p&gt;특히나 어떤 입력을 받고 연산을 처리하여 결과를 출력해야하는 개발자에게는 더욱 더 시간과 효율이 중요하기에 &lt;u&gt;알고리즘이라는 해결 과정을 통해 효율적으로 결과를 만들어 내는 것&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;그래서 이런 해결 과정을 어떻게 설계 할건지에 따라 시간과 효율이 나누어지게 된다.&lt;/p&gt;
&lt;p&gt;우선 우리는 알고리즘을 설계하기 위해서는 해야 할 작업을 명확하게 명시해야한다.&lt;br/&gt;
즉, 설계하려는 알고리즘이 &lt;code&gt;무엇을&lt;/code&gt; 하는지 &lt;code&gt;입력&lt;/code&gt;과 &lt;code&gt;출력&lt;/code&gt;으로 명시할 수 있다.
&lt;img src=&#34;https://github.com/myeongcode/myeongcode.github.io/assets/67165016/2caec0af-38d0-4ec4-ad63-50b8644328f7&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
알고리즘에서 우리가 따져봐야하는건 이 알고리즘의 &lt;strong&gt;효율성&lt;/strong&gt;, &lt;strong&gt;명확성&lt;/strong&gt;이다&lt;/p&gt;
&lt;p&gt;이 효율성을 평가하기 위해 알고리즘의 성능을 나타내는 척도로는 크게 &lt;strong&gt;공간복잡도(space complexity)&lt;/strong&gt;, &lt;strong&gt;시간복잡도(time complexity)&lt;/strong&gt; 로 나타낼 수 있다.&lt;br/&gt;
즉, &lt;code&gt;어떤 알고리즘이 효율적인지를 판단하는 척도&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;공간복잡도(space complexity)&lt;/strong&gt; : 프로그램 실행과 완료에 얼마나 많은 공간(메모리)가 필요한지에 대한 지표&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;시간복잡도(time complexity)&lt;/strong&gt; : 프로그램 완료에 얼마나 빠르게 실행(얼마나 많이 연산)되는지에 대한 지표&lt;br/&gt;
즉, &lt;strong&gt;특정 크기의 입력을 기준으로 할 때 필요한 연산의 횟수&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;u&gt;보통은 시간복잡도를 위주로 알고리즘의 성능을 판단&lt;/u&gt;하기에 시간 복잡도에 대해서 자세히 알아야한다.&lt;/p&gt;
&lt;h2 id=&#34;시간복잡도-time-complexity&#34;&gt;시간복잡도 (Time complexity)&lt;/h2&gt;
&lt;p&gt;⇒ 시간복잡도는 &lt;code&gt;연산 횟수&lt;/code&gt;를 세는 것&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*왜 시간복잡도라고 말하면서 실행 시간이 아니라 연산 횟수를 세는 것일까?&lt;/em&gt;&lt;br/&gt;
⇒ 모든 OS, IDE, 플랫폼에서 동일한 결과가 나오지 않기 때문에 연산 횟수로 사용&lt;/p&gt;
&lt;p&gt;하지만, 이렇게 연산 횟수도 어떤 경우인지에 따라 시간 복잡도가 나뉘어진다.&lt;br/&gt;
경우는 아래와 같이 3가지로 나뉜다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color:#5A8DFF;&#34;&gt;&lt;strong&gt;최선의 경우 (Best Case)&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;
⇒ 최적의 입력을 한 상태에서, 작업을 완료하는 데 가장 연산 횟수가 적은 경우&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;최악의 경우 (Worst Case)&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;
⇒ 최악의 입력 한 상태에서, 작업을 완료하는 데 가장 연산 횟수가 많은 경우&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color:#FF8C35;&#34;&gt;&lt;strong&gt;평균의 경우 (Average Case)&lt;/strong&gt;&lt;/span&gt;&lt;br/&gt;
⇒ 여러 경우의 수를 고려하여, 총 연산 횟수를 계산하고 시행 횟수로 나눈 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;알고리즘 분석 시 평균의 경우와 최악의 경우가 가장 많이 활용되며, 알고리즘이 복잡해질수록 평균을 구하기 어려워져 &lt;u&gt;최악의 경우로 알고리즘 성능을 파악&lt;/u&gt;한다.&lt;/p&gt;
&lt;p&gt;예시를 통해 시간 복잡도에 대해 알아봅시다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;algorithm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayMax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;currentMax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;············&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄱ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;···········&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄴ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentMax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;········&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄷ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;currentMax&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;········&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄹ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentMax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;위와 같은 배열 A에서 최대값을 리턴하는 알고리즘이 있을 때, 입력값과 출력값은 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입력값 : n개의 정수를 갖는 배열 A&lt;/li&gt;
&lt;li&gt;출력값 : A의 수 중에서 가장 큰 값&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;출력값은 어쨋든 A 중에서 가장 큰 값을 출력해주면 됩니다. &lt;br/&gt;
반면, 입력값은 어떤 것이 들어올지 알 수 없습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;몇 개의 정수를 가진 배열이 입력될지&lt;/li&gt;
&lt;li&gt;배열A의 숫자는 어떤 것이 들어갈지&lt;/li&gt;
&lt;li&gt;어떤 정수의 숫자 n이 들어올지&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예상할 수 없습니다.&lt;/p&gt;
&lt;p&gt;그렇기에 어떤 입력이 들어와도 이 WTC(Worctcase Time Complexity)보단 수행 시간이 적기때문에 WTC로 최대로 연산했을 때의 시간복잡도를 측정할 수 있습니다.&lt;br/&gt;
여기서 만약 A=[4, 3, 2, 1, …]과 같이 계속 줄어들게 된다면 0번째 인덱스가 가장 크기때문에 (ㄹ)번 문장을 실행하지 않게 됩니다.&lt;br/&gt;
하지만, A=[1, 2, 3, 4, …]과 같이 계속 증가하는 숫자가 있다고 한다면 &lt;u&gt;(ㄹ)번 문장을 계속해서 실행해야 합니다. (ㄹ)번 문장을 실행한다는 것은 대입 연산을 한번 더 해야하고 알고리즘 수행 시간이 증가&lt;/u&gt;하게 됩니다.&lt;/p&gt;
&lt;p&gt;모든 입력값에 대한 시간복잡도는 일반적으로 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;T(n)&lt;/strong&gt;&lt;/span&gt;으로 표기합니다.&lt;/p&gt;
&lt;p&gt;예를들어, n=5이고 A=[3, -1, 9, 2, 12]라고 가정해보자.&lt;/p&gt;
&lt;p&gt;(ㄱ) A[0]의 값 3은 currentMax에 저장이 되면서 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;대입연산&lt;/strong&gt;&lt;/span&gt;을 합니다. (1회)&lt;/p&gt;
&lt;p&gt;(ㄴ) 반복문을 실행합니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A[1]과의 비교&lt;/p&gt;
&lt;p&gt;(ㄷ) 현재 currentMax에 저장되어있는 값 3이 A[1]의 값 -1보다 작은지 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;비교연산&lt;/strong&gt;&lt;/span&gt;을 합니다 (2회)&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#808080;&#34;&gt;비교 결과 currentMax의 값이 더 크므로 (ㄹ) 문장을 건너뛰게 됩니다.&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A[2]와의 비교&lt;/p&gt;
&lt;p&gt;(ㄷ) 현재 currentMax에 저장되어 있는 값 3이 A[2]의 값 9보다 작은지 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;비교연산&lt;/strong&gt;&lt;/span&gt;을 합니다. (3회)&lt;/p&gt;
&lt;p&gt;(ㄹ) 비교 결과 A[2]의 값이 더 크므로 (ㄹ) 문장을 실행시키고 A[2]의 값인 9를 currentMax에 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;대입연산&lt;/strong&gt;&lt;/span&gt;을 합니다. (4회)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A[3]와의 비교&lt;/p&gt;
&lt;p&gt;(ㄷ) 현재 currentMax에 저장되어 있는 값 9가 A[3]의 값 2보다 작은지 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;비교연산&lt;/strong&gt;&lt;/span&gt;을 합니다. (5회)&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#808080;&#34;&gt;비교 결과 currentMax의 값이 더 크므로 (ㄹ) 문장을 건너뛰게 됩니다.&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A[4]와의 비교&lt;/p&gt;
&lt;p&gt;(ㄷ) 현재 currentMax에 저장되어 있는 값 9가 A[4]의 값 12보다 작은지 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;비교연산&lt;/strong&gt;&lt;/span&gt;을 합니다. (6회)&lt;/p&gt;
&lt;p&gt;(ㄹ) 비교 결과 A[4]의 값이 더 크므로 (ㄹ) 문장을 실행시키고 A[4]의 값인 12를 currentMax에 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;대입연산&lt;/strong&gt;&lt;/span&gt;을 합니다. (7회)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이렇게 총 7회의 기본 연산을 진행하게 됩니다. (반복문 제외)&lt;br/&gt;
이렇게 연산을 할 때 안 할때에 따라 연산 횟수가 달라지게 되는데, 여기서 Worstcase의 경우면 (ㄹ)문장이 매 조건마다 실행되었을 때를 가정하는겁니다. 그래서 이때 Worstcase는 총 9번의 연산을 하게 되는겁니다.&lt;/p&gt;
&lt;p&gt;반복문 안 (ㄷ), (ㄹ) 문장을 보면, (ㄷ)문장에서 비교 연산 1회, (ㄹ)문장에서 대입연산 1회를 실행합니다.&lt;br/&gt;
(ㄴ) 문장에서 for문은 1부터 n-1까지 총 n-1회 실행하게 됩니다.&lt;br/&gt;
따라서, (ㄷ), (ㄹ) 문장 2회 * 반복문 n-1회 → 2(n-1) = 2n-2가 됩니다.&lt;br/&gt;
하지만 (ㄱ) 문장에서 대입연산도 1회 더해야하기 때문에 2n-2+1을 하게되면 시간복잡도는 총 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;T(n) = 2n-1&lt;/strong&gt;&lt;/span&gt;이 됩니다.&lt;br/&gt;
그럼 n=100일 때의 시간복잡도(연산 횟수)를 손쉽게 구할 수 있습니다.&lt;br/&gt;
&lt;span style=&#34;color:#808080;&#34;&gt;&lt;em&gt;*n=100, T(100) = 2 * 100 - 1 = 199번의 연산 횟수를 갖게됨.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;예시1-sumeven함수의-시간-복잡도-구하기&#34;&gt;예시1) sumEven함수의 시간 복잡도 구하기&lt;/h3&gt;
&lt;p&gt;배열A에서 짝수인 수 만을 더하는 함수의 시간복잡도 T(n)을 구해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;algorithm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumEven&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;··············&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄱ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;········&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄴ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;····&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;··&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄷ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;········&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄹ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;해당 알고리즘에서 worst case는 (ㄹ)이 계속해서 실행되는 경우이다. 그러기 위해선 (ㄷ)의 조건이 항상 참이여야하므로 A[i]%2 == 0이 되려면 &lt;u&gt;A의 배열은 모두 짝수&lt;/u&gt;여야한다.&lt;/p&gt;
&lt;p&gt;A배열의 모든 값이 짝수라고 가정하면 수행시간은 다음과 같을 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(ㄱ) 문장에서 대입연산 수행 (1회)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;(ㄴ) 반복문 0부터 n-1까지 n번 반복 (총 2회)&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;(ㄷ)에서 A[i]%2 (산술연산) 수행 (2회)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;(ㄷ)에서 A[i]%2 == 0 (비교연산) 수행 (3회)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;(ㄹ)에서 sum += A[i] → sum = sum + A[i] (총 2회)&lt;br/&gt;
&lt;ul&gt;
&lt;li&gt;(1) sum + A[i] (산술연산) 수행 (4회)&lt;br/&gt;&lt;/li&gt;
&lt;li&gt;(2) sum = sum + A[i] (대입연산) 수행 (5회)&lt;br/&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;n번 진행하는 반복문 안에서 (ㄷ), (ㄹ) 문장을 연산 4회 진행하기 때문에 4n&lt;/p&gt;
&lt;p&gt;(ㄱ)문장에서 1회 진행하므로 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;T(n) = 4n + 1&lt;/strong&gt;&lt;/span&gt;이 된다.&lt;/p&gt;
&lt;h3 id=&#34;예시2-이중-for문의-sum2함수의-시간복잡도-구하기&#34;&gt;예시2) 이중 for문의 sum2함수의 시간복잡도 구하기&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;algorithm&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;························&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄱ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;············&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄴ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;do&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;········&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄷ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;·······&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ㄹ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;이렇게 반복문이 바로 중첩되어 있는 경우라면, 첫 번째 반복문 i와 두 번째 반복문 j의 관계를 파악해야합니다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;j&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;n-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;n-2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n-1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(1) i=0일 때, j는 n번 반복&lt;br/&gt;
(2) i=1일 때, j는 n-1번 반복&lt;br/&gt;
(3) i=2일 때, j는 n-2번 반복&lt;br/&gt;
…&lt;br/&gt;
(n) i=n-1일 때, j는 1번 반복&lt;br/&gt;&lt;/p&gt;
&lt;p&gt;그렇다면, j의 경우의 수를 모두 더하면 기본 연산이 있는 반복문이 몇 번 진행되는지 알 수 있습니다.&lt;br/&gt;
(ㄴ)는 n번 반복되고, (ㄷ)는 각 i에 대해 n-i번 반복되므로 전체 반복횟수는 다음과 같습니다.&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-1}(n-i)
$$&lt;/p&gt;
&lt;p&gt;이므로, 이 합을 계산해보면&lt;/p&gt;
&lt;p&gt;$$
\sum_{i=0}^{n-1}(n-i)=n+(n-1)+(n-2)+&amp;hellip;+1
$$&lt;/p&gt;
&lt;p&gt;가 됩니다.&lt;br/&gt;
이는 역수열의 합이고, 다음과 같이 계산할 수 있습니다.&lt;/p&gt;
&lt;p&gt;$$
\sum_{k=1}^{n}k=\frac{n(n+1)}{2}
$$&lt;/p&gt;
&lt;p&gt;따라서, 반복 연산은 $\frac{n(n+1)}{2}$ 번만큼 실행됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(ㄱ) 대입 연산 수행 (1회)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(ㄴ) 반복문 0부터 n번 수행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(ㄷ) i에 대해 n-i번 수행&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(ㄹ) 문장&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;(1) A[i] &lt;strong&gt;*&lt;/strong&gt; A[j]의 산술연산 수행 (1회)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(2) sum &lt;strong&gt;+&lt;/strong&gt; A[i] * A[j]의 산술연산 수행 (1회)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(3) sum &lt;strong&gt;=&lt;/strong&gt; sum + A[i] * A[j]의 대입연산 수행 (1회)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;반복문에서 $\frac{n(n+1)}{2}$ 회 반복을 진행하고 (ㄹ)문장에서 산술연산 2회 + 대입연산 1회 = 총 3회 연산을 진행하므로&lt;/p&gt;
&lt;p&gt;$$
3\times\frac{n(n+1)}{2}
$$&lt;/p&gt;
&lt;p&gt;(ㄱ)에서 대입 연산 1회를 수행하므로
$$3\times\frac{n(n+1)}{2} + 1$$
$$\frac{3n^2}{2}+\frac{3n}{2}+1$$
따라서 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;T(n)&lt;/strong&gt;&lt;/span&gt;은 아래와 같이 시간복잡도를 표시한다.
$$T(n) = \frac{3n^2}{2}+\frac{3n}{2}+1$$&lt;/p&gt;
&lt;h2 id=&#34;big-o-표기법&#34;&gt;BIG-O 표기법&lt;/h2&gt;
&lt;p&gt;⇒ 주어진 함수에서 &lt;u&gt;&lt;strong&gt;가장 빨리 증가하는 항만을 남긴채 나머지를 다 버리는 표기법&lt;/strong&gt;&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;우리는 위의 시간복잡도 $T(n)$을 통해 알고리즘의 수행시간&lt;br/&gt;
즉, 최악의 조건인 시간복잡도를 계산할 수 있게 되었습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://github.com/myeongcode/myeongcode.github.io/assets/67165016/55db2a5f-3c5d-420a-b17a-0a35b628eac5&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
위의 시간복잡도의 증가율을 위와 같이 그래프로 표시하면 $n$의 증가율에 따라 변화하는 모습을 볼 수 있습니다.&lt;br/&gt;
여기서 ArrayMax과 sum1(sumEven)의 최고차항은 $n$입니다. 따라서 입력한 크기 n에 대하여 선형적으로 증가하는 모습을 확인할 수 있는 반면 sum2의 최고차항은 $n^2$이므로 n에 대하여 제곱으로 증가하는 모습을 확인할 수 있습니다.&lt;/p&gt;
&lt;p&gt;여기서 우리는 &lt;u&gt;입력한 크기 n이 커질 때, 수행 시간이 얼마나 증가&lt;/u&gt;하는지가 중요하다는 것을 알아야합니다.&lt;br/&gt;
즉, 입력값이 커질수록 &lt;strong&gt;함수값의 증가율은 최고차항이 좌지우지&lt;/strong&gt;하기 때문에 상수항들은 알고리즘의 기본 연산 횟수에 큰 영향을 미치지 못합니다.&lt;/p&gt;
&lt;p&gt;그래서 다른 것들은 다 신경쓰지 않고 최고차항만으로 시간복잡도의 대략적인 형태를 나타낸 것을 &lt;span style=&#34;color:#FF4343;&#34;&gt;&lt;strong&gt;BIG-O표기법&lt;/strong&gt;&lt;/span&gt;이라 합니다.&lt;br/&gt;
따라서, 시간 복잡도 $T(n)$을 BIG-O로 표기하게 된다면 다음과 같이 표기할 수 있다.
&lt;img src=&#34;https://github.com/myeongcode/myeongcode.github.io/assets/67165016/07ed5b07-9cab-493c-b0b0-fc1ce1597e0c&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
분명 다른 알고리즘의 시간복잡도가 다름에도 최고차항이 같기때문에 $O(n)$으로 동일합니다.&lt;/p&gt;
&lt;p&gt;BIG-O 표기법은 &lt;u&gt;증가율 측면에서 표기하는 것이기 때문에 크게 보면 같은 알고리즘&lt;/u&gt;이라고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;*sum2의 시간복잡도는 $\frac{3n^2}{2}+\frac{3n}{2}+1$이므로 BIG-O는 $O(n^2)$이라고 표시할 수 있다.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;increment_one&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;위와 같은 알고리즘이 있다고 할 때, $T(n)=1$이다. 이런 경우에는 최고차항은 $n^0$이므로 BIG-O표기법으로 나타내면 $O(1)$입니다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;color:#808080;&#34;&gt;*&lt;em&gt;정말 1번만 한다는 의미가 아니라, 어떠한 입력이 들어와도 연산 횟수가 일정하면 $O(1)$과 같이 나타냅니다.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;number_of_bits&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;위와 같은 알고리즘이 있다고 할 때, 입력값 n이 들어오면 2로 나눈 몫을 n에 대입하는데, 몇 번 할 수 있는지 count해서 return하는 알고리즘이 있다.&lt;br/&gt;
예를 들어, n=8이라면 n은 반복문을 거칠 때 마다 8 → 4 → 2 → 1 → 0 순으로 바뀌고 count는 4를 반환할 것입니다. 또한 반복문 한 번 돌 때마다, n의 값은 $\frac{n}{2^1}$ → $\frac{n}{2^2}$ → $\frac{n}{2^3}$ →$\frac{n}{2^4}$ 순으로 바뀔 것 입니다.&lt;/p&gt;
&lt;p&gt;결국은 $\frac{n}{2^{count}}$가 되어야 반복문이 끝나게 되는 것이므로 $\frac{n}{2^{count}}=1$이 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;양변에 $2^{count}$를 곱하여 정리하면&lt;br/&gt; $n=2^{count}$&lt;/li&gt;
&lt;li&gt;이 식의 양변에 $\log_2$를 취하면&lt;br/&gt; $\log_2{(n)}=\log_2{(2^{count})}$&lt;/li&gt;
&lt;li&gt;로그의 성질을 이용해서 오른쪽 식을 풀어쓰면 &lt;br/&gt; $\log_2{(n)}=count\cdot\log_2{(2)}$&lt;/li&gt;
&lt;li&gt;$\log_2{(2)}$는 1이므로 식은 다음과 같이 단순화됩니다.&lt;br/&gt; $\log_2{(n)}=count$&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;따라서, $\frac{n}{2^{count}}=1$을 n에 대해서 정리하면 $\log_{2}{(n)}=count$가 됩니다.&lt;/p&gt;
&lt;p&gt;또한, while 반복문에서 n//2(산술연산) 1회, n=n//2(대입연산) 1회, count+1(산술연산) 1회, count=count+1(대입연산) 1회이므로 $4\times\log_2{(n)}$이고&lt;/p&gt;
&lt;p&gt;count=0(대입연산)의 상수연산을 더하면 $4\times\log_2{(n)}+1$이 됩니다.&lt;/p&gt;
&lt;p&gt;따라서, $T(n)=4\times\log_2{(n)}+1$이 되고, $O(\log_2n)$이 되며,
보통은 $O(\log n)$ 이렇게 쓴다&lt;/p&gt;
&lt;h2 id=&#34;big-o-실행-순서&#34;&gt;BIG-O 실행 순서&lt;/h2&gt;
&lt;p&gt;⇒ 서로 다른 알고리즘의 시간복잡도의 BIG-O
&lt;img src=&#34;https://github.com/myeongcode/myeongcode.github.io/assets/67165016/df9e8804-9ab4-4470-b6ae-09e8e03b86b2&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
&lt;img src=&#34;https://github.com/myeongcode/myeongcode.github.io/assets/67165016/e1d6b6ca-3d47-490b-8ef0-73bb007be2d3&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;image&#34;
	
	
&gt;
다른 알고리즘이 궁금하다면 &lt;a class=&#34;link&#34; href=&#34;https://www.bigocheatsheet.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.bigocheatsheet.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기까지 시간복잡도와 BIG-O에 대한 내용을 정리해봤다.
수학을 잘 못해서.. 조금 어렵긴했지만 개념정도는 확실히 정리된 것 같아 뿌듯하다.
다음으로는 자료구조는 무엇이고 자료구조에서의 시간복잡도를 살펴볼 예정이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://chanos.tistory.com/entry/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%84%B1%EB%8A%A5%ED%8F%89%EA%B0%80%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84-%EC%99%84%EB%B2%BD%ED%9E%88-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-2#chap1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;
CHAN-GPT - [자료구조] 알고리즘 성능평가를 위한 시간 복잡도 완벽히 이해하기! - (2)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.chulgil.me/algorithm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;chulgil.lee - 알고리즘의 시간복잡도와 Big-O 쉽게 이해하기&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
